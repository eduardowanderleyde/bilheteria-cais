"""
Script para gerar execut√°vel do Sistema de Bilheteria
Execute: python build_exe.py
"""

import subprocess
import sys
import os

def instalar_pyinstaller():
    """Instala o PyInstaller se n√£o estiver instalado"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller j√° est√° instalado")
    except ImportError:
        print("üì¶ Instalando PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller instalado com sucesso!")

def gerar_executavel():
    """Gera o execut√°vel do sistema"""
    print("üî® Gerando execut√°vel...")
    
    # Comando para gerar o execut√°vel
    comando = [
        "pyinstaller",
        "--onefile",                    # Um √∫nico arquivo .exe
        "--windowed",                   # Sem console (interface gr√°fica)
        "--name=Sistema_Bilheteria",    # Nome do execut√°vel
        "--icon=icon.ico",              # √çcone (opcional)
        "--add-data=database.py;.",     # Incluir arquivo do banco
        "--hidden-import=customtkinter",
        "--hidden-import=sqlite3",
        "--hidden-import=PIL",
        "main.py"
    ]
    
    # Remover par√¢metros opcionais se arquivos n√£o existirem
    if not os.path.exists("icon.ico"):
        comando = [cmd for cmd in comando if not cmd.startswith("--icon")]
    
    try:
        subprocess.run(comando, check=True)
        print("‚úÖ Execut√°vel gerado com sucesso!")
        print("üìÅ Localiza√ß√£o: dist/Sistema_Bilheteria.exe")
        
        # Criar pasta de distribui√ß√£o
        if not os.path.exists("distribuicao"):
            os.makedirs("distribuicao")
        
        # Copiar execut√°vel para pasta de distribui√ß√£o
        import shutil
        if os.path.exists("dist/Sistema_Bilheteria.exe"):
            shutil.copy2("dist/Sistema_Bilheteria.exe", "distribuicao/")
            print("üì¶ Execut√°vel copiado para pasta 'distribuicao/'")
        
        # Criar arquivo de instru√ß√µes
        instrucoes = """
# Sistema de Bilheteria - Museu

## Como usar:

1. Execute o arquivo: Sistema_Bilheteria.exe
2. Login: funcionario1
3. Senha: 123456

## Funcionalidades:

- ‚úÖ Registrar vendas de ingressos
- ‚úÖ Ver relat√≥rios de vendas
- ‚úÖ Visualizar dados salvos
- ‚úÖ Banco de dados local (SQLite)

## Pre√ßos:

- Inteira: R$ 10,00
- Meia: R$ 5,00
- Gratuito: Ter√ßas e idosos

## Observa√ß√µes:

- O banco de dados ser√° criado automaticamente
- Todos os dados ficam salvos localmente
- N√£o precisa de internet para funcionar
- Sistema seguro e confi√°vel

Para suporte, consulte o arquivo README.md
        """
        
        with open("distribuicao/INSTRUCOES.txt", "w", encoding="utf-8") as f:
            f.write(instrucoes)
        
        print("üìã Arquivo de instru√ß√µes criado")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao gerar execut√°vel: {e}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Gerador de Execut√°vel - Sistema de Bilheteria")
    print("=" * 50)
    
    # Verificar se os arquivos necess√°rios existem
    arquivos_necessarios = ["main.py", "database.py"]
    for arquivo in arquivos_necessarios:
        if not os.path.exists(arquivo):
            print(f"‚ùå Arquivo n√£o encontrado: {arquivo}")
            return
    
    # Instalar PyInstaller
    instalar_pyinstaller()
    
    # Gerar execut√°vel
    if gerar_executavel():
        print("\nüéâ Processo conclu√≠do com sucesso!")
        print("üìÅ Verifique a pasta 'distribuicao/' para o execut√°vel final")
    else:
        print("\n‚ùå Erro no processo de gera√ß√£o")

if __name__ == "__main__":
    main()
